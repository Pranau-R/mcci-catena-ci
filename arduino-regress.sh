#!/bin/bash

# prerequisites:
#
#	git
#	arduino-cli
#
#	arudino-cli core --additional-ursl "$MCCI_ADDITIONAL_URLS" install mcci:samd
#	arudino-cli core --additional-ursl "$MCCI_ADDITIONAL_URLS" install mcci:stm32
#	arudino-cli core --additional-ursl "$MCCI_ADDITIONAL_URLS" install arduino:avr
#	arudino-cli core --additional-ursl "$MCCI_ADDITIONAL_URLS" install adafruit:avr
#	arudino-cli core --additional-ursl "$MCCI_ADDITIONAL_URLS" install esp32:esp32
#
#	for esp32 compiles: python3, pip3 install pyserial and make sure python3 is
#	the default
#
#	For platformio compiles: python3, pip3, setuptools, platformio.

MCCI_ADDITIONAL_URLS="https://github.com/mcci-catena/arduino-boards/raw/master/BoardManagerFiles/package_mcci_index.json,https://adafruit.github.io/arduino-board-index/package_adafruit_index.json,https://dl.espressif.com/dl/package_esp32_index.json"
MCCI_CACHE_DIR="/tmp/lmic-ci-$$"
rm -rf "$MCCI_CACHE_DIR"
mkdir -p "$MCCI_CACHE_DIR"
ln -sf "$(realpath "$PWD")" ~/Arduino/libraries/Test_Library
typeset -a ERRORS
trap 0 3 'printf "%s\n" "${ERRORS[@]}"'

function _cacheopts {
	echo --build-cache-path "$MCCI_CACHE_DIR/${1//:/_}"
}

function _libopts {
	# echo --libraries "$(realpath ~/Arduino/libraries)"/Test_Library
	true
}

function _commonopts {
	true
}

# usage: _samdopts BOARD REGION
function _samdopts {
	BOARD="mcci:samd:${1:-mcci_catena_4450}"
	_cacheopts "$BOARD"
	_libopts
	_commonopts
	echo -b "$BOARD:lorawan_region=${2:-us915}" 
}

# usage: _stm32l0opts BOARD REGION opt xserial upload sysclk
function _stm32l0opts {
	local BOARD="mcci:stm32:${1:-mcci_catena_4610}:opt=${3:-osstd},xserial=${4:-generic},upload_method=${6:-STLink},sysclk=${7:-pll32m}"
	_cacheopts "$BOARD"
	_libopts
	_commonopts
	echo -b "$BOARD"
	echo --build-property recipe.hooks.objcopy.postobjcopy.1.pattern=true
}

# usage: _avropts BOARD
function _avropts {
	BOARD=adafruit:avr:${1:-feather32u4}
	_cacheopts "$BOARD"
	_libopts
	_commonopts
	echo -b "$BOARD"
}

# usage: _esp32opts BOARD
function _esp32opts {
	BOARD="esp32:esp32:${1:-heltec_wifi_lora_32}:FlashFreq=80"
	_cacheopts "$BOARD"
	_libopts
	_commonopts
	echo -b "$BOARD"
}

#### print a comment in a box, so you can find thigns in a log ####
function _boxcomment {
	printf "%s\n" "$@" | fmt | awk '
	{
		if (maxlen < length($0)) {
			maxlen = length($0)
		}
		lines[nlines++] = $0;
	}
	function repeat(s, n	, result, i) {
		result = "";
		for (i = 0; i < n; ++i) {
			result = result s;
		}
		return result;
	}
	END	{
		mark = repeat("#", maxlen + 4);
		printf("%s\n", mark);
		for (i = 0; i < nlines; ++i) {
			printf("# %-" maxlen "s #\n", lines[i]);
		}
		printf("%s\n", mark);
	}'
}

# split up a word that might be FOO=value or FOO, and output
# FOO value or FOO 1, respectively.
function _splitdef {
	if [[ "$1" = "${1/=/}" ]]; then
		echo "$1" 1
	else
		echo "${1/=/ }"
	fi
}

# put options into the project config file.
function _projcfg {
	{
	printf "%s\n" "/* generated by arduino-regress.sh */"
	for i in "$@" ; do
		printf '#define %s %s\n' $(_splitdef "$i")
	done
	}  > $PWD/project_config/lmic_project_config.h
}

# set up project config file for class A device, and also include any
# other config items from args.
function _projcfg_class_a {
	_projcfg "$@" "DISABLE_PING" "DISABLE_BEACONS"
}

function _expect_failure {
	if [ $? -eq 0 ]; then 
		echo "Suceeded, but should have failed!" 
		echo project_config/lmic_project_config.h
		cat $PWD/project_config/lmic_project_config.h
		return 1
	else
		echo "Failed, as expected"
		return 0
	fi
}

#
# show the output of the config commands for reference.
_boxcomment "Output of config commands:"
echo _stm32l0opts: $(_stm32l0opts) projcfg: $(_stm32l0opts '' projcfg)
echo _samdopts: $(_samdopts) projcfg: $(_samdopts '' projcfg)
echo _avropts: $(_avropts)
echo _esp32opts: $(_esp32opts)

#	$1	sketch
#	$2	message
function _error {
	declare MESSAGE="$(basename "$1" .ino) for ${MCCI_TARGET} board ${MCCI_BOARD} region ${MCCI_REGION} radio ${MCCI_RADIO}: $2"
	echo "Error: $MESSAGE"
	ERRORS+=("$MESSAGE")
}

# arguments:
#	$1	sketch
#	$2..	args
function _ci_compile {
	MCCI_SKETCH="$1"
	shift
	echo "${MCCI_SKETCH} ${MCCI_BOARD} ${MCCI_REGION} ${MCCI_RADIO}:"
	echo "arduino-cli compile" "$@" "${MCCI_SKETCH}"
	arduino-cli compile "$@" "${MCCI_SKETCH}" || _error "${MCCI_SKETCH}" "compile failed"
}

function _ci_compile_fail {
	MCCI_SKETCH="$1"
	shift
	echo "${MCCI_SKETCH} ${MCCI_BOARD} ${MCCI_REGION} ${MCCI_RADIO}:"
	arduino-cli compile "$@" "${MCCI_SKETCH}" && _error "${MCCI_SKETCH}" "didn't fail but should have"
}

function ci_samd {
	_boxcomment "SAMD"
	MCCI_TARGET=SAMD
	typeset -a MCCI_BOARDS=(mcci_catena_4450 mcci_catena_4410 mcci_catena_4420 mcci_catena_4460 mcci_catena_4470)
	typeset -a MCCI_REGIONS=(us915 eu868 au915 as923 as923jp kr920 in866)
	typeset -a MCCI_RADIOS=(sx1276 sx1272)
	typeset GENOPTS=_samdopts
	for iSketch in ${MCCI_EXAMPLES_ALL}; do
	    declare -i SKETCH_IS_USLIKE=0
	    declare -i REGION_IS_USLIKE=0
	    if [[ "${iSketch/us915/}" != "${iSketch}" ]]; then
	    	SKETCH_IS_USLIKE=1
	    fi
	    for iRegion in "${MCCI_REGIONS[@]}" ; do
	       	REGION_IS_USLIKE=0
		case "${iRegion}" in
			us915 | au915) REGION_IS_USLIKE=1;;
		esac
		if [[ ${SKETCH_IS_USLIKE} -ne 0 ]] && [[ ${REGION_IS_USLIKE} -eq 0 ]] ; then
			continue
		fi
		MCCI_RADIO="${MCCI_RADIOS[0]}"
		MCCI_REGION="${iRegion}"
		MCCI_BOARD="${MCCI_BOARDS[0]}"
		_projcfg COMPILE_REGRESSION_TEST "CFG_$iRegion" "CFG_$MCCI_RADIO"
		_ci_compile "${iSketch}" $($GENOPTS "$MCCI_BOARD" projcfg)
		if grep -q COMPILE_REGRESSION_TEST "${iSketch}"; then
			_projcfg "CFG_$iRegion" "CFG_$MCCI_RADIO"
			_ci_compile_fail "${iSketch}" $($GENOPTS "$MCCI_BOARD" projcfg)
		fi
	    done
	done
}

function ci_stm32 {
	_boxcomment "STM32"
	MCCI_BOARDS="mcci_catena_4610 mcci_catena_4612 mcci_catena_4618 mcci_catnea_4630 mcci_catena_4801 mcci_catena_4802"
	arduino-cli compile $(_stm32l0opts) $PWD/examples/header_test/header_test.ino || echo "failed"
}

function ci_esp32 {
	_boxcomment "ESP32"
	MCCI_BOARDS="heltec_wifi_lora_32"
	arduino-cli compile $(_esp32opts) $PWD/examples/header_test/header_test.ino || echo "failed"
}

function ci_avr {
	_boxcomment "AVR 32u4"
	MCCI_BOARDS="feather32u4"
	arduino-cli compile $(_avropts) $PWD/examples/header_test/header_test.ino || echo "failed"
}

#
# make a list of examples to be checked:
function _list_examples {
	for i in examples/* ; do
		CANDIDATE=$(basename $i)
		if [ -f "$i/${CANDIDATE}.ino" ]; then
			echo "$i/${CANDIDATE}.ino"
		fi
	done
}

MCCI_EXAMPLES_ALL="$(_list_examples)"
_boxcomment "Examples:" "$MCCI_EXAMPLES_ALL"

MCCI_TARGETS=""
MCCI_REGIONS="us915 eu868 au915 as923 as923jp kr920 in866"
MCCI_RADIOS="sx1276 sx1272"

ci_samd
ci_stm32
ci_avr
ci_esp32

printf "%s\n" "${ERRORS[@]}"
